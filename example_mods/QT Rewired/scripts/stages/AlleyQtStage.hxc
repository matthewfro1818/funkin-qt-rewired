import flixel.FlxG;
import funkin.play.character.CharacterDataParser;
import funkin.play.character.CharacterType;
import funkin.modding.base.ScriptedFlxRuntimeShader;
import funkin.play.PlayState;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import funkin.play.stage.Stage;
import openfl.filters.ShaderFilter;
import funkin.util.Constants;
import funkin.play.character.AnimateAtlasCharacter;
import funkin.graphics.shaders.AdjustColorShader;
import funkin.modding.module.ModuleHandler;
import funkin.play.PlayStatePlaylist;
import funkin.util.WindowUtil;
import funkin.graphics.FunkinSprite;
import funkin.play.cutscene.VideoCutscene;
import funkin.play.cutscene.CutsceneType;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;  
class AlleyQtStage extends Stage {
    private var colorShader:AdjustColorShader = new AdjustColorShader();
    public var allowChangeKB:Bool = false;
    private var tweenWarning:FlxTween;
    private var tweenLight:FlxTween;
    private var hasDanced:Bool = false;
    private var currentChange:String;
    private var isPico;
    public  var moduleCheck;
    
    function new() {
        super('trashAlleyQt');
    }

    override function buildStage() {
        super.buildStage();
        isPico = PlayState.instance.currentVariation == 'pico';
        moduleCheck = ModuleHandler.getModule("BoyfriendDodgeMechanic");
        
        for (prop in ["lightOverlay", "tvLights"])
                    getNamedProp(prop).blend = 0;
        getNamedProp("lightOverlay").visible = !isPico;

        if (isPico)
            {
                setPropColorShader("TVFront",-15,0,0,0);
                setPropColorShader("wall", -5,0,0,0);
                var placeHolderOverlay = new FunkinSprite().loadTexture("placeHolderOverlay");
                placeHolderOverlay.zIndex = getNamedProp("lightOverlay").zIndex;
                placeHolderOverlay.blend = 0;
                placeHolderOverlay.setPosition(getNamedProp("lightOverlay").x,getNamedProp("lightOverlay").y);
                PlayState.instance.currentStage.add(placeHolderOverlay);
            }

        handleStageChange((PlayState.instance.currentSong.id == "obliterated") ? "Killer": "Normal");
    }
    override function onSongLoaded(event) {
        super.onSongLoaded(event);
        if (isPico)
        {
            PlayState.instance.currentStage.getGirlfriend().y = 240;
            PlayState.instance.currentStage.getGirlfriend().x = 420;
            PlayState.instance.currentStage.getBoyfriend().y += 20;
        }
    }
   
    override function onBeatHit(event:SongTimeScriptEvent):Void { //Pasar esto a Obliterated
        super.onBeatHit(event);
        
        if (currentChange != "Red" || event.beat % 2 != 0) return;
        
        if (hasDanced) {
            tweenWarning.start();
            tweenLight.start();
        } else {
            tweenLight.finish();
            tweenWarning.finish();
            getNamedProp("warningScreen").alpha = 1;
            getNamedProp("tvLights").alpha = 1;
        }
        
        hasDanced = !hasDanced;
    }

    function fetchAssetPaths():Array<String> 
	{
		var results:Array<String> = super.fetchAssetPaths();

		results.push(Paths.animateAtlas("characters/QT_assets/qtCutscene"));
		results.push(Paths.sound('qtsfx'));
		results.push(Paths.sound('hi_cutie'));

		return results;
	}

    override public function onSongEvent(event:SongEventScriptEvent):Void {
        super.onSongEvent(event);
        
        switch (event.eventData.eventKind) {
            case "changeStage":
                handleStageChange(event.eventData.value.char);
            case "blackIn":
                getNamedProp('blackScreenR').alpha = 1;
            case "PLAYTRUEFUCKINGSHIT":
                var shit = event.eventData.value.char == "gf" ? getGirlfriend() : getBoyfriend();
                shit.playAnimation(event.eventData.value.anim,false,false,false);
        }
    }
    
    private function handleStageChange(charName:String):Void {
        currentChange = charName;
        
        updateStageProps(charName);
        updateVisibility(charName);
        cancelTweensIfNeeded();
        
        switch (charName) {
            case "Killer":
                updateColorShader(-20, -30, 20, -20);

            case "Blue":
                updateColorShader(-35, -30, 20, -20);
            case "Red":
                updateColorShader(-10, -30, 20, -20);
                setupRedTweens();
            default:
                    updateColorShader(isPico ? -20 : -10, 3, 0, 0);
                    resetAnimations();
        }
        
        refresh();
    }
    
    private function updateStageProps(charName:String):Void {
        for (prop in ["wall", "TVFront", "lightOverlay", "tvLights"]) {
            getNamedProp(prop).animation.play(charName);
        }
    }
    
    private function setupCharacters():Void {
        for (char in [getBoyfriend(), getGirlfriend(), getDad()]) {
            if (char != null && char.shader == null) 
                char.shader = colorShader; 
                char.idleSuffix = "";
        }
    }
    
    private function updateVisibility(charName:String):Void {
        getNamedProp("tvStaticLeft").visible = (charName == "Killer");
        getNamedProp("tvStaticRight").visible = (charName == "Killer");
        getNamedProp("blueScreen").visible = (charName == "Blue");
        getNamedProp("warningScreen").visible = (charName == "Red");
        getNamedProp("tvLights").visible = (charName != "Normal");
        getNamedProp("tvLights").alpha = 1;
    }
    
    private function cancelTweensIfNeeded():Void {
        if (tweenWarning != null) {
            tweenWarning.cancel();
            tweenLight.cancel();
        }
    }
    
    private function setupRedTweens():Void {
        tweenWarning = FlxTween.tween(getNamedProp("warningScreen"), {alpha: 0}, 0.5, {type: 1});
        tweenLight = FlxTween.tween(getNamedProp("tvLights"), {alpha: 0}, 0.5, {type: 1});
    }
    
    private function resetAnimations():Void {
        for (prop in ["wall", "TVFront", "lightOverlay", "tvLights"]) {
            var namedProp = getNamedProp(prop);
            if (namedProp != null)
                namedProp.animation.play("Normal");
        }
    }

    private function setPropColorShader(prop:String, hue:Int, saturation:Int, contrast:Int, brightness:Int):Void {
        var shitShader = new AdjustColorShader();
        shitShader.hue = hue;
        shitShader.saturation = saturation;
        shitShader.contrast = contrast;
        shitShader.brightness = brightness;
        getNamedProp(prop).shader = shitShader;
    }
    private function updateColorShader(hue:Int, saturation:Int, contrast:Int, brightness:Int):Void {
        colorShader.hue = hue;
        colorShader.saturation = saturation;
        colorShader.contrast = contrast;
        colorShader.brightness = brightness;
    }
    
    override function onCountdownStart(event) {
        super.onCountdownStart(event);
        setupCharacters();

        PlayState.instance.comboPopUps.offsets = [60, 300]; 
        PlayState.instance.iconP2.zIndex = 851;

        resetBlackScreens();
        getBoyfriend().shouldAlternate = false;
        getDad().shouldAlternate = false;
        getDad().zIndex = 300;
    }
    
    private function resetBlackScreens():Void {
        for (prop in ["blackScreen", "blackScreenVideo", "spotLight", "redScreen"]) {
            getNamedProp(prop).alpha = 0;
        }
    }
    
    override function onNoteGhostMiss(event) {
        super.onNoteGhostMiss(event);
        
        var skipAnimations = ["danceLeft-alt", "cough", "burp-long" "danceRight-alt", "preDance", "dance", "cheer", "intro", "flip","idle-alt"];
        if (skipAnimations.indexOf(getBoyfriend().getCurrentAnimation()) != -1) {
            event.cancel();
            event.stopPropagation();
        }
    }


}