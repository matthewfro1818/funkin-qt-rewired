import funkin.play.character.MultiSparrowCharacter;
import funkin.play.PlayState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.group.FlxTypedSpriteGroup;
import funkin.graphics.FunkinSprite;
import funkin.modding.base.ScriptedFlxAtlasSprite;
import funkin.modding.base.ScriptedFlxSprite;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.graphics.adobeanimate.FlxAtlasSprite;
import funkin.audio.visualize.ABotVis;
import funkin.play.PlayState;
import flixel.FlxG;
import funkin.play.character.MultiSparrowCharacter;
import flixel.util.FlxTimer;
import funkin.play.GameOverSubState;
import funkin.input.Controls;
import funkin.play.character.CharacterType;
import funkin.modding.base.ScriptedFlxAtlasSprite;
class NeneQtAnims extends MultiSparrowCharacter {
	function new() {
		super('NENE-QT');
	}

	var pupilState:Int = 0;

	var PUPIL_STATE_NORMAL = 0;
	var PUPIL_STATE_LEFT = 1;
	var abot:FlxAtlasSprite;
	var abotViz:ABotVis;
	var stereoBG:FlxSprite;
	var heartsLoveProp:FunkinSprite;
	var eyeWhites:FlxSprite;
	var pupil:FlxAtlasSprite;
	var altSuffix:String = "";
	var canAlternate:Bool = true;
	function onCreate(event:ScriptEvent) {
		super.onCreate(event);

		heartsLoveProp = FunkinSprite.createSparrow(0,0,'characters/NENE/heartEffect/NENE_HEARTS');
		heartsLoveProp.animation.addByPrefix('hearts', 'nene hearts', 24, true);
		
		stereoBG = new FlxSprite(0, 0, Paths.image('characters/NENE/aBotQt/stereoBG'));

		eyeWhites = new FunkinSprite().makeSolidColor(160, 60);

		pupil = new FlxAtlasSprite(0, 0, Paths.animateAtlas("characters/NENE/aBotQt/systemEyes", "shared"));
		pupil.x = this.x;
		pupil.y = this.y;
		pupil.zIndex = this.zIndex - 5;

		abot = ScriptedFlxAtlasSprite.init('ABotAtlasSpriteQt', 0, 0);
		abot.x = this.x;
		abot.y = this.y;
		abot.zIndex = this.zIndex - 1;

		abotViz = new ABotVis(FlxG.sound.music, false);
		abotViz.x = this.x;
		abotViz.y = this.y;
		abotViz.zIndex = abot.zIndex + 1;
	}

	
	var VULTURE_THRESHOLD = 0.25 * 2;
	var STATE_DEFAULT = 0;
	var STATE_PRE_RAISE = 1;
	var STATE_RAISE = 2;
	var STATE_READY = 3;
	var STATE_LOWER = 4;
	var currentState:Int = STATE_DEFAULT;
	var MIN_BLINK_DELAY:Int = 3;
	var MAX_BLINK_DELAY:Int = 7;
	var blinkCountdown:Int = MIN_BLINK_DELAY;

	function dance(forceRestart:Bool) {
		if (abot != null)
		{
			abot.playAnimation("");
    		abot.anim.curFrame = 1; 
		}

		switch(currentState) {
			case STATE_DEFAULT:
				if (canAlternate) {
				if (hasDanced) 
					playAnimation('danceRight'+ altSuffix, forceRestart);
				else 
					playAnimation('danceLeft'+ altSuffix, forceRestart);
				} else 
					playAnimation('idle' + altSuffix, forceRestart);

				hasDanced = !hasDanced;
				
			case STATE_PRE_RAISE:
				playAnimation('danceLeft', false);
				hasDanced = false;
			case STATE_READY:
				if (blinkCountdown == 0) {
					playAnimation('idleKnife', false);
					blinkCountdown = FlxG.random.int(MIN_BLINK_DELAY, MAX_BLINK_DELAY);
				} else 
					blinkCountdown--;
			case STATE_LOWER:
				if(getCurrentAnimation() != 'lowerKnife')
					playAnimation('lowerKnife');
			default:
				
		}
	}

	var refershedLol:Bool = false;

	public override function onSongEvent(scriptEvent:SongEventScriptEvent)
	{
		super.onSongEvent(scriptEvent);
		if (scriptEvent.eventData.eventKind == "FocusCamera")
		{
			var eventProps = scriptEvent.eventData.value;
			switch (Std.parseInt(eventProps.char)) {
				case 0:
					movePupilsRight();
				case 1:
					movePupilsLeft();
				default:
			}
		}

	}

	function movePupilsLeft():Void {
		if (pupilState == PUPIL_STATE_LEFT) return;
		trace('Move pupils left');
		pupil.playAnimation('');
		pupil.anim.curFrame = 0;
	}

	function movePupilsRight():Void {
		if (pupilState == PUPIL_STATE_NORMAL) return;
		trace('Move pupils right');
		pupil.playAnimation('');
		pupil.anim.curFrame = 17;
	}
	private function updateHeartsEffect() {
		if (this.animation == null || heartsLoveProp.animation == null) return;

		if (this.animation.curAnim != null && this.animation.curAnim.name == "idle-alt") {
			heartsLoveProp.visible = true;
			heartsLoveProp.animation.play("hearts");
		} else {
			heartsLoveProp.visible = false;
			if (heartsLoveProp.animation.curAnim != null) {
				heartsLoveProp.animation.stop();
				heartsLoveProp.animation.curAnim.curFrame = 0;
			}
		}
	}
	

	function onUpdate(event:UpdateScriptEvent) {
		super.onUpdate(event);

		abot.visible = this.visible;
		pupil.visible = this.visible;
		eyeWhites.visible = this.visible;
		stereoBG.visible = this.visible;
		updateHeartsEffect();
		if (pupil?.anim?.isPlaying)
		{
			switch (pupilState)
			{
				case PUPIL_STATE_NORMAL:
					if (pupil.anim.curFrame >= 17)
					{
						trace('Done moving pupils left');
						pupilState = PUPIL_STATE_LEFT;
						pupil.anim.pause();
					}

				case PUPIL_STATE_LEFT:
					if (pupil.anim.curFrame >= 30)
					{
						trace('Done moving pupils right');
						pupilState = PUPIL_STATE_NORMAL;
						pupil.anim.pause();
					}
			}
		}

		if (!refershedLol)
		{
			abot.x = this.x - 100;
			abot.y = this.y + 216; 
			abot.zIndex = this.zIndex - 10;

			PlayState.instance.currentStage.add(abot);

			abotViz.x = abot.x + 200;
			abotViz.y = abot.y + 84;
			abotViz.zIndex = abot.zIndex - 1;
			PlayState.instance.currentStage.add(abotViz);

			eyeWhites.x = abot.x + 40;
			eyeWhites.y = abot.y + 250;
			eyeWhites.zIndex = abot.zIndex - 10;
			PlayState.instance.currentStage.add(eyeWhites);

			pupil.x = abot.x - 507;
			pupil.y = abot.y - 492;
			pupil.zIndex = eyeWhites.zIndex + 5;
			PlayState.instance.currentStage.add(pupil);

			stereoBG.x = abot.x + 150;
			stereoBG.y = abot.y + 30;
			stereoBG.zIndex = abot.zIndex - 8;
			PlayState.instance.currentStage.add(stereoBG);

			heartsLoveProp.x = this.x + 138;
			heartsLoveProp.y = this.y - 161;
			heartsLoveProp.zIndex = this.zIndex + 1;
			PlayState.instance.currentStage.add(heartsLoveProp);

			PlayState.instance.currentStage.refresh();
			refershedLol = true;
		}

		if (shouldTransitionState()) 
			transitionState();
	}
	
	override function playAnimation(name:String,restart:Bool, ignoreOther:Bool, reversed:Bool):Void
	{
		if (PlayState.instance != null) 
		{
			switch (name) {	
				case "huh":
					altSuffix = '-alt';
					canAlternate = false;
				case "cheer":
					altSuffix = "";
					canAlternate = true;

			}
			
		}
		super.playAnimation(name,restart,ignoreOther,reversed);
	}
	
	override function onSongStart(event:ScriptEvent) {
		abotViz.snd = FlxG.sound.music;
		abotViz.initAnalyzer();
	}

	override function onSongRetry(event:ScriptEvent)
	{
		super.onSongRetry();
		abotViz.dumpSound();
	}

	var animationFinished:Bool = false;

	function onAnimationFinished(name:String) {
		super.onAnimationFinished(name);

		switch(currentState) {
			case STATE_RAISE:
				if (name == "raiseKnife" ) {
					animationFinished = true;
					transitionState();
				}
			case STATE_LOWER:
				if (name == "lowerKnife") {
					animationFinished = true;
					transitionState();
				}

			default:
		}
	}

	function onAnimationFrame(name:String, frameNumber:Int, frameIndex:Int) {
		super.onAnimationFrame(name, frameNumber, frameIndex);

		switch(currentState) {
			case STATE_PRE_RAISE:
				if (name == "danceLeft" && frameNumber == 13) {
					animationFinished = true;
					transitionState();
				}
			default:
		}
	}

	function shouldTransitionState():Bool {
		return PlayState.instance.currentStage.getBoyfriend().characterId != "pico-blazin";
	}

	function transitionState() {
		switch (currentState) {
			case STATE_DEFAULT:
				if (PlayState.instance.health <= VULTURE_THRESHOLD) 
					currentState = STATE_PRE_RAISE;
				else 
					currentState = STATE_DEFAULT;
			case STATE_PRE_RAISE:
				if (PlayState.instance.health > VULTURE_THRESHOLD)
					currentState = STATE_DEFAULT;
				else if (animationFinished) {
					currentState = STATE_RAISE;
					playAnimation('raiseKnife');
					animationFinished = false;
				}
			case STATE_RAISE:
				if (animationFinished) {
					currentState = STATE_READY;
					animationFinished = false;
				}
			case STATE_READY:
				if (PlayState.instance.health > VULTURE_THRESHOLD)
					currentState = STATE_LOWER;
				
			case STATE_LOWER:
				if (animationFinished) {
					currentState = STATE_DEFAULT;
					animationFinished = false;
				}
			default:
				currentState = STATE_DEFAULT;
		}
	}
}
